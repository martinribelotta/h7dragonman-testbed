##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.5.2] date: [Thu Nov 28 23:40:19 ART 2019] 
##########################################################################################################################



# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = h7testbed


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
$(wildcard Src/*.c) \
$(wildcard sfud/src/*.c) \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_qspi.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hcd.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_fdcan.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_delayblock.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_sdmmc.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_usb.c \
Middlewares/Third_Party/FatFs/src/diskio.c \
Middlewares/Third_Party/FatFs/src/ff.c \
Middlewares/Third_Party/FatFs/src/ff_gen_drv.c \
Middlewares/Third_Party/FatFs/src/option/syscall.c \
Src/system_stm32h7xx.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth_ex.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/auth.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/ccp.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/chap_ms.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/chap-md5.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/chap-new.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/demand.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/eap.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/eui64.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/fsm.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/ipcp.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/ipv6cp.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/lcp.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/magic.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/mppe.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/multilink.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/ppp.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/pppapi.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/pppcrypt.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/pppoe.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/pppol2tp.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/pppos.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/upap.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/utils.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/vj.c \
Middlewares/Third_Party/LwIP/src/netif/ethernet.c \
Middlewares/Third_Party/LwIP/src/netif/slipif.c \
Middlewares/Third_Party/LwIP/src/netif/lowpan6.c \
Middlewares/Third_Party/LwIP/src/netif/ppp/ecp.c \
Middlewares/Third_Party/LwIP/src/api/api_lib.c \
Middlewares/Third_Party/LwIP/src/api/api_msg.c \
Middlewares/Third_Party/LwIP/src/api/err.c \
Middlewares/Third_Party/LwIP/src/api/netbuf.c \
Middlewares/Third_Party/LwIP/src/api/netdb.c \
Middlewares/Third_Party/LwIP/src/api/netifapi.c \
Middlewares/Third_Party/LwIP/src/api/sockets.c \
Middlewares/Third_Party/LwIP/src/api/tcpip.c \
Middlewares/Third_Party/LwIP/src/core/def.c \
Middlewares/Third_Party/LwIP/src/core/dns.c \
Middlewares/Third_Party/LwIP/src/core/inet_chksum.c \
Middlewares/Third_Party/LwIP/src/core/init.c \
Middlewares/Third_Party/LwIP/src/core/ip.c \
Middlewares/Third_Party/LwIP/src/core/mem.c \
Middlewares/Third_Party/LwIP/src/core/memp.c \
Middlewares/Third_Party/LwIP/src/core/netif.c \
Middlewares/Third_Party/LwIP/src/core/pbuf.c \
Middlewares/Third_Party/LwIP/src/core/raw.c \
Middlewares/Third_Party/LwIP/src/core/stats.c \
Middlewares/Third_Party/LwIP/src/core/sys.c \
Middlewares/Third_Party/LwIP/src/core/tcp.c \
Middlewares/Third_Party/LwIP/src/core/tcp_in.c \
Middlewares/Third_Party/LwIP/src/core/tcp_out.c \
Middlewares/Third_Party/LwIP/src/core/timeouts.c \
Middlewares/Third_Party/LwIP/src/core/udp.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/autoip.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/dhcp.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/etharp.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/icmp.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/igmp.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/ip4.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/ip4_addr.c \
Middlewares/Third_Party/LwIP/src/core/ipv4/ip4_frag.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/dhcp6.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/ethip6.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/icmp6.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/inet6.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/ip6.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/ip6_addr.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/ip6_frag.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/mld6.c \
Middlewares/Third_Party/LwIP/src/core/ipv6/nd6.c \
Middlewares/Third_Party/LwIP/src/apps/mqtt/mqtt.c \
Middlewares/Third_Party/FatFs/src/option/ccsbcs.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c \
Src/main.c \
Src/bsp_driver_sd.c \
Src/sd_diskio.c \
Src/fatfs.c \
Src/lwip.c \
Src/ethernetif.c \
Src/usb_device.c \
Src/usbd_conf.c \
Src/usbd_desc.c \
Src/usbd_cdc_if.c \
Src/stm32h7xx_it.c \
Src/stm32h7xx_hal_msp.c

# ASM sources
ASM_SOURCES =  \
startup_stm32h750xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m7

# fpu
FPU = -mfpu=fpv5-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
USE_HAL_DRIVER \
STM32H750xx \
LWIP_DEBUG

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
sfud/inc \
Inc \
Drivers/STM32H7xx_HAL_Driver/Inc \
Drivers/STM32H7xx_HAL_Driver/Inc/Legacy \
Middlewares/Third_Party/FatFs/src \
Drivers/CMSIS/Device/ST/STM32H7xx/Include \
Middlewares/Third_Party/LwIP/src/include \
Middlewares/Third_Party/LwIP/system \
Middlewares/Third_Party/LwIP/src/include/netif/ppp \
Middlewares/Third_Party/LwIP/src/include/lwip \
Middlewares/Third_Party/LwIP/src/include/lwip/apps \
Middlewares/Third_Party/LwIP/src/include/lwip/priv \
Middlewares/Third_Party/LwIP/src/include/lwip/prot \
Middlewares/Third_Party/LwIP/src/include/netif \
Middlewares/Third_Party/LwIP/src/include/posix \
Middlewares/Third_Party/LwIP/src/include/posix/sys \
Middlewares/Third_Party/LwIP/system/arch \
Middlewares/ST/STM32_USB_Device_Library/Core/Inc \
Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc \
Drivers/CMSIS/Include

# compile gcc flags
EXTRA_FLAGS = -Wall -fdata-sections -ffunction-sections

COMMON_FLAGS = $(MCU)
COMMON_FLAGS += $(OPT)
COMMON_FLAGS += $(EXTRA_FLAGS)

ASFLAGS = $(COMMON_FLAGS)
ASFLAGS += $(AS_DEFS)
ASFLAGS += $(AS_INCLUDES)

CFLAGS = $(COMMON_FLAGS)
CFLAGS += $(addprefix -D, $(C_DEFS))
CFLAGS += $(addprefix -I, $(C_INCLUDES))

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32H750VBTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -Wl,--print-memory-usage

ifeq ($(PARALLEL),)
NJOBS:=1
else
ifeq ($(PARALLEL),auto)
NJOBS:=$(shell echo "$(shell nproc) + 2" | bc)
else
NJOBS:=$(PARALLEL)
endif
endif

.PHONY: all .all

all:
	@$(MAKE) -j$(NJOBS) .all --no-print-directory

# default action: build all
.all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/obj/,$(notdir $(sort $(C_SOURCES:.c=.o))))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/obj/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/obj/%.o: %.c Makefile | $(BUILD_DIR) 
	@echo CC $<
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/obj/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/obj/%.o: %.s Makefile | $(BUILD_DIR)
	@echo AS $<
	@$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile $(LDSCRIPT)
	@echo LD $@
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@$(BIN) -v $< $@	
	
$(BUILD_DIR):
	@mkdir $@
	@mkdir $@/obj

#######################################
# clean up
#######################################
.PHONY: clean program debug loadqspi runqspi

clean:
	-rm -fR $(BUILD_DIR)

program: $(BUILD_DIR)/$(TARGET).elf
	@openocd -f openocd.cfg \
		-c "gdb_memory_map disable" -c "program $< verify reset exit"

debug: $(BUILD_DIR)/$(TARGET).elf
	@openocd -f openocd.cfg

$(BUILD_DIR)/$(TARGET).bin: $(BUILD_DIR)/$(TARGET).elf

loadqspi: $(BUILD_DIR)/$(TARGET).bin
	$(MAKE) -C qspiloader run BINARY_FILE=$(shell readlink -f $<)

runqspi: $(BUILD_DIR)/$(TARGET).bin
	$(MAKE) -C qspiloader run BINARY_FILE=

.PHONY: .vscode-integration

PHONY_TARGETS:=$(filter-out .%, $(shell grep -E '^.PHONY:' $(firstword $(MAKEFILE_LIST)) | cut -f 2 -d ':'))

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/obj/*.d)

COMMA:=,
QUOTE:="
EMPTY:=
OBRACK:={
CBRACK:=}
IDENT:=$(EMPTY)				$(EMPTY)
IDENT2:=$(EMPTY)        $(EMPTY)
SPACE:=$(EMPTY) $(EMPTY)
NL:=\n

define DOT_VSCODE_C_CPP_PROPERTIES
{
    "configurations": [
        {
            "name": "$(TARGET)",
            "includePath": [
$(IDENT)$(subst $(SPACE),$(COMMA)$(NL)$(IDENT),$(addsuffix $(QUOTE), $(addprefix $(QUOTE)$${workspaceFolder}/, $(C_INCLUDES))))
            ],
            "defines": [
$(IDENT)$(subst $(SPACE),$(COMMA)$(NL)$(IDENT),$(addsuffix $(QUOTE), $(addprefix $(QUOTE), $(C_DEFS))))
            ],
            "compilerArgs": [
$(IDENT)$(subst $(SPACE),$(COMMA)$(NL)$(IDENT),$(addsuffix $(QUOTE), $(addprefix $(QUOTE), $(COMMON_FLAGS) $(OPT_FLAGS))))
            ],
            "compilerPath": "$(CC)",
            "cStandard": "c11",
            "cppStandard": "c++17",
            "intelliSenseMode": "gcc-arm"
        }
    ],
    "version": 4
}
endef
export DOT_VSCODE_C_CPP_PROPERTIES

define TASK_TEMPLATE
{
            "problemMatcher": "$$gcc",
            "type": "shell",
            "group": "build",
            "label": "make $1",
            "command": "make $1"
        }
endef

define DOT_VSCODE_TASKS
{
    "version": "2.0.0",
    "tasks": [
$(IDENT2)$(subst $(CBRACK) $(OBRACK),$(CBRACK)$(COMMA)\n$(IDENT2)$(OBRACK),$(foreach t,$(PHONY_TARGETS),$(call TASK_TEMPLATE,$(t))))
    ]
}
endef
export DOT_VSCODE_TASKS

define DOT_VSCODE_LAUNCH
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Debug demo",
            "cwd": "$${workspaceRoot}",
            "executable": "$${workspaceFolder}/$(BUILD_DIR)/$(TARGET).elf",
            "request": "launch",
            "type": "cortex-debug",
            "servertype": "openocd",
            "configFiles": [ "$${workspaceFolder}/openocd.conf" ],
            "runToMain": true,
            "preLaunchTask": "Make all"
        }
    ]
}
endef
export DOT_VSCODE_LAUNCH

.vscode-integration:
	@mkdir -p .vscode
	@echo -n "$$DOT_VSCODE_C_CPP_PROPERTIES" > .vscode/c_cpp_properties.json
	@echo -n "$$DOT_VSCODE_TASKS" > .vscode/tasks.json
	@echo -n "$$DOT_VSCODE_LAUNCH" > .vscode/launch.json

# *** EOF ***
